function validaciones()
    
    close all;

    %% Variables reales del robot
    
    % Reloj
    clock = [0;0.100000000000000;0.200000000000000;0.300000000000000;0.400000000000000;0.500000000000000;0.600000000000000;0.700000000000000;0.800000000000000;0.900000000000000;1;1.10000000000000;1.20000000000000;1.30000000000000;1.40000000000000;1.50000000000000;1.60000000000000;1.70000000000000;1.80000000000000;1.90000000000000;2;2.10000000000000;2.20000000000000;2.30000000000000;2.40000000000000;2.50000000000000;2.60000000000000;2.70000000000000;2.80000000000000;2.90000000000000;3;3.10000000000000;3.20000000000000;3.30000000000000;3.40000000000000;3.50000000000000;3.60000000000000;3.70000000000000;3.80000000000000;3.90000000000000;4;4.10000000000000;4.20000000000000;4.30000000000000;4.40000000000000;4.50000000000000;4.60000000000000;4.70000000000000;4.80000000000000;4.90000000000000;5;5.10000000000000;5.20000000000000;5.30000000000000;5.40000000000000;5.50000000000000;5.60000000000000;5.70000000000000;5.80000000000000;5.90000000000000;6;6.10000000000000;6.20000000000000;6.30000000000000;6.40000000000000;6.50000000000000;6.60000000000000;6.70000000000000;6.80000000000000;6.90000000000000;7;7.10000000000000;7.20000000000000;7.30000000000000;7.40000000000000;7.50000000000000;7.60000000000000;7.70000000000000;7.80000000000000;7.90000000000000;8;8.10000000000000;8.20000000000000;8.30000000000000;8.40000000000000;8.50000000000000;8.60000000000000;8.70000000000000;8.80000000000000;8.90000000000000;9;9.10000000000000;9.20000000000000;9.30000000000000;9.40000000000000;9.50000000000000;9.60000000000000;9.70000000000000;9.80000000000000;9.90000000000000;10;10.1000000000000;10.2000000000000];
    
    % Estados medidos

    Y = [490.454545454545;490.454545454545;510.454545454545;530.454545454545;550.454545454545;570.454545454545;590.454545454545;610.454545454545;630.454545454545;650.454545454545;670.454545454545;690.454545454545;710.454545454545;730.454545454545;750.454545454545;770.454545454545;790.454545454545;810.454545454545;830.454545454545;850.454545454545;870.454545454545;890.454545454545;910.454545454545;930.454545454545;950.454545454545;970.454545454545;990.454545454545;1010.45454545454;1030.45454545454;1050.45454545454;1070.45454545454;1090.45454545454;1110.45454545454;1130.45454545454;1150.45454545454;1170.45454545454;1190.45454545454;1210.45454545454;1230.45454545454;1250.45454545454;1270.45454545454;1290.45454545454;1310.45454545454;1330.45454545454;1350.45454545454;1370.45454545454;1390.45454545455;1410.45454545455;1430.45454545455;1450.45454545455;1470.45454545455;1490.45454545455;1510.45454545455;1530.45454545455;1550.45454545455;1570.45454545455;1590.45454545455;1610.45454545455;1630.45454545455;1650.45454545455;1670.45454545455;1690.45454545455;1710.45454545455;1730.45454545455;1750.45454545455;1770.45454545455;1790.45454545455;1810.45454545455;1830.45454545455;1850.45454545455;1870.45454545455;1890.45454545455;1910.45454545455;1930.45454545455;1950.45454545455;1970.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455;1990.45454545455];
    theta = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
    
    % Estados reales
    [X_real, Y_real] = find_real();
    
    % Velocidades medidas
    vl = [200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
    vr = [200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;200;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
    
    % Mediciones de infrarrojos
    % Medida 4
    medida_1 = [1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1384.77289050954;1431.93371454033;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1384.77289050954;956.682445307150;1350.46663467391;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500];
    % Medida 3
    medida_2 = [271.768239247364;282.948395016697;279.339951721507;271.303353888858;265.668046707922;268.264044103315;271.768239247364;270.837755412249;271.768239247364;271.768239247364;282.274705207300;277.520949503704;286.520266557136;290.059393859765;1500;366.050240378273;247.598814640260;252.092343069144;233.488822939028;353.283398588562;311.744016397493;331.334128746245;340.392914111550;362.115684758361;356.693558765287;378.329406521743;406.352611685530;375.529438578250;375.529438578250;559.597471725454;701.957606680889;719.811366034161;631.720873662723;533.696697787031;685.978730211408;747.890536359893;821.393624174993;897.950534541932;1160.42590400750;1500;1500;1417.01967549790;1036.88413601851;1500;1500;1443.98150698529;935.965509817645;1160.42590400750;1500;1500;1086.61078760201;335.926813741198;467.606603511029;577.067967293012;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;956.682445307150;518.714771875399;1022.28323145246;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500];
    % Medida 5
    medida_3 = [1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1373.23714114689;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500;1500];

    
    %% Parametros de la simulación
    tipo = 5;
    
    mapa = mapas(tipo);
    puntos = size(clock, 1);
    
    % Cantidad de puntos en el mapa
    [punto_Y, punto_X] = size(mapa);
    
    % Mapa a recorrer
    X_map = linspace(0, 4060, punto_X);
    Y_map = linspace(0, 5175, punto_Y);
    
    % Diferencial de tiempo
    dt = 0.1;
    
    % Separacion de memoria
    estado_ideal = zeros(3, puntos);
    estado_medido = zeros(3, puntos);
    
    
    % Estado inicial
    X_init = 3832.64000000000;
    Y_init = 470.454545454545;
    estado_inicial = [X_init Y_init 0]';
    
    estado_ideal(:, 1) = estado_inicial;
    estado_medido(:, 1) = estado_inicial;
    
    %% Parametros del filtro de particulas
    % Numero de particulas
    Np = 200;
   
    w_k = repmat(1/Np, 1, Np);
    estado_filtrado = zeros(3, puntos);
    particulas = mvnrnd(estado_inicial,diag([300 300 0.5]), Np)';
    
    estado_filtrado(:, 1) = estado_inicial;
    
    robot.mapa = mapa;
    robot.X_map = X_map;
    robot.Y_map = Y_map;
    robot.Np = Np;
    
    N_real = length(X_real);
    estado_real = zeros(2, N_real);
    
    for j = 1:N_real
        estado_real(:, j) = [X_real(j) Y_real(j)];
    end
    
    for i = 2:1:puntos
        tic;
        estado_medido(:, i) = [X(i) Y(i) theta(i)];
        estado_ideal(:, i) = modelo_directo(vl(i), vr(i), estado_ideal(:, i - 1), dt);            
        
        robot.estado = estado_medido(:, i);
        robot.vel = [vr(i) vl(i)];
        
        %z_ideal = ultrasonido(robot, 1);
        z = [medida_1(i) medida_2(i) medida_3(i)]';
        robot.meas = z;
        
        [estado_filtrado(:, i), particulas, w_k] = filtro_particulas(particulas, w_k, robot);
        aux = (estado_medido(:, i) - estado_filtrado(:, i));
        error(:,i) = sqrt(aux(1)^2 + aux(2)^2);
        tiempo(i) = toc;
    end
    
    error = error(~isnan(error));
    
    mean(error)
    
    mean(tiempo)
    
    figure;
    plot(estado_ideal(1, :), estado_ideal(2, :), 'b-')
    hold on;
    plot(estado_filtrado(1, :), estado_filtrado(2, :), 'r-')
    plot(estado_medido(1, :), estado_medido(2, :), 'g-')
    plot(estado_real(1, :), estado_real(2, :), 'm-')
    hold off;
    xlabel('X [mm]');
    ylabel('Y [mm]');
    legend('Estado medido', 'Estado filtrado', 'Estado ideal', 'Estado real');
    
%     figure;
%     plot(estado_ideal(1, :), 'b-')
%     hold on;
%     plot(estado_filtrado(1, :), 'r-')
%     plot(estado_medido(1, :), 'g-')
%     plot(estado_real(1, :), 'm-')
%     hold off;
%     xlabel('Tiempo [s]');
%     ylabel('X [mm]');
%     legend('Estado medido', 'Estado filtrado', 'Estado ideal', 'Estado real');
%     
%     figure;
%     plot(estado_ideal(2, :), 'b-')
%     hold on;
%     plot(estado_filtrado(2, :), 'r-')
%     plot(estado_medido(2, :), 'g-')
%     plot(estado_real(2, :), 'm-')
%     hold off;
%     xlabel('Tiempo [s]');
%     ylabel('Y [mm]');
%     legend('Estado medido', 'Estado filtrado', 'Estado ideal', 'Estado real');
%     


end





